/*
 * grunt-contrib-concat
 * http://gruntjs.com/
 *
 * Copyright (c) 2012 "Cowboy" Ben Alman, contributors
 * Licensed under the MIT license.
 */

'use strict';
Array.prototype.unset = function(val)
{
	var index = this.indexOf(val);
	if(index > -1)
	{
		this.splice(index,1)
	}
}

module.exports = function(grunt) {

  // Internal lib.
  // var comment = require('./lib/comment').init(grunt);

  grunt.registerTask('custom', function() {

		grunt.log.writeln('Le processus de customisation commence ici 1!');
		// var a = grunt.file.read("./app/components/bootstrap/dist/css/bootstrap.css");
		// var cssom = require('cssom');
		// console.log(cssom.parse(".test{color:red;}"));
		//console.log(cssom.parse(grunt.file.read("./app/components/bootstrap/dist/css/bootstrap.css")));

		parseBootstrap(grunt.file.read("./libs/bootstrap/dist/css/bootstrap.css"));

		var fs = require('fs');
		var CSSOM = require('cssom');

		var CONTAINER_CLASS = ".pc";
		var XS_CLASS = ".xs";
		var SM_CLASS = ".sm";
		var MD_CLASS = ".md";
		var LG_CLASS = ".lg";

		function realTypeof(obj)
		{
			return Object.prototype.toString.apply(obj);
		}
		
		function isStyleRule(obj)
		{
			return obj.selectorText != undefined;
		}

		function isMediaRule(obj)
		{
			if(obj.media)
			return obj.media != undefined;
		}

		function updateSelector(CSSRule, prefix)
		{
			var selectorArray = CSSRule.selectorText.split(",");
			for(var j=0; j<selectorArray.length; j++)
			{
				selectorArray[j] = prefix + " " + selectorArray[j].trim();
			}
			//console.log(selectorArray.toString());
			return selectorArray.toString();
		}

		// .pc.sm .lead,.pc.md .lead,.pc.lg .lead {font-size: 21px;}
		// .pc. .lead.pc.sm .lead.pc.md .lead.pc.lg .lead {font-size: 21px;}
		function toto (CSSRule, prefix)
		{
			var selectorArray = CSSRule.selectorText.split(",");

			for(var z=0; z<prefix.length; z++)
			{
				prefix[z]=".pc"+prefix[z];
			}

			for(var i=0; i<selectorArray.length;i++)
			{
				var a="";
				for(var j=0; j<prefix.length; j++)
				{
					//a+= ".pc."+ prefixArray[j]+" "+selectorArray[i];
					a += prefix[j]+" "+selectorArray[i]+",";
					
				}
				selectorArray[i] = a;
			}
			return selectorArray.toString();
		}

		function parseBootstrap(plainTextData) {

		console.log("here we are");
		var CSSOM = require('cssom');
		var CONTAINER_CLASS = ".pc";
		var XS_CLASS = ".xs";
		var SM_CLASS = ".sm";
		var MD_CLASS = ".md";
		var LG_CLASS = ".lg";

		var bootstrapStylesheet = CSSOM.parse(plainTextData),
			bootstrapRules = bootstrapStylesheet.cssRules;

		for(var i=0, bootstrapCSSRule; bootstrapCSSRule = bootstrapRules[i]; i++)
		{

			if(isStyleRule(bootstrapCSSRule))
			{
				bootstrapCSSRule.selectorText = updateSelector(bootstrapCSSRule, CONTAINER_CLASS);
			}

			// if(isMediaRule(bootstrapCSSRule))
			if(bootstrapCSSRule.media != undefined && bootstrapCSSRule.media[0] !='print')
			{
				//var prefix = CONTAINER_CLASS;
				var prefix = [];

				// Still dirty
				// .pc.sm .lead,
				// .pc.md .lead,
				// .pc.lg .lead {
				//	font-size: 21px;
				//	}
				switch(bootstrapCSSRule.media[0])
				{
					case "(max-width: 767px)": // XS
						prefix.push(XS_CLASS);

						var mediaCSSRules = bootstrapCSSRule.cssRules;
						for(var k=0; k<mediaCSSRules.length; k++)
						{
							var selArray = mediaCSSRules[k].selectorText.split(",");
							for(var l=0; l<selArray.length; l++)
							{
								var selText = ".pc.xs " + selArray[l];
								selArray[l] = selText;
							}
							mediaCSSRules[k].selectorText = selArray.toString();
							bootstrapRules.splice(i, 1, mediaCSSRules[k]);
							//bootstrapRules.unset(bootstrapCSSRule);
						}
						break;
					case "(min-width: 768px)" : // SM, MD, LG
					case "screen and (min-width: 768px)" : // SM, MD, LG
						prefix.push(SM_CLASS,MD_CLASS,LG_CLASS);
						var mediaCSSRules = bootstrapCSSRule.cssRules;
						for(var k=0; k<mediaCSSRules.length; k++)
						{
							var selArray = mediaCSSRules[k].selectorText.split(",");
							for(var l=0; l<selArray.length; l++)
							{
								var selText = ".pc.sm " + selArray[l] + ",";
								selText+=".pc.md " + selArray[l] + ",";
								selText+=".pc.lg " + selArray[l];
								selArray[l] = selText;
							}
							mediaCSSRules[k].selectorText = selArray.toString();
							bootstrapRules.splice(i, 1, mediaCSSRules[k]);
							//bootstrapRules.unset(bootstrapCSSRule);
						}
						break;
					case "(min-width: 768px) and (max-width: 991px)" : // SM
						prefix.push(SM_CLASS);
						var mediaCSSRules = bootstrapCSSRule.cssRules;
						for(var k=0; k<mediaCSSRules.length; k++)
						{
							var selArray = mediaCSSRules[k].selectorText.split(",");
							for(var l=0; l<selArray.length; l++)
							{
								var selText = ".pc.sm " + selArray[l];
								selArray[l] = selText;
							}
							mediaCSSRules[k].selectorText = selArray.toString();
							bootstrapRules.splice(i, 1, mediaCSSRules[k]);
							//bootstrapRules.unset(bootstrapCSSRule);
						}
						break;	
					case "(min-width: 992px)" : // MD, LG
						prefix.push(MD_CLASS, LG_CLASS);
						var mediaCSSRules = bootstrapCSSRule.cssRules;
						for(var k=0; k<mediaCSSRules.length; k++)
						{
							var selArray = mediaCSSRules[k].selectorText.split(",");
							for(var l=0; l<selArray.length; l++)
							{
								var selText = ".pc.md " + selArray[l] + ",";
								selText+=".pc.lg " + selArray[l];
								selArray[l] = selText;
							}
							mediaCSSRules[k].selectorText = selArray.toString();
							bootstrapRules.splice(i, 1, mediaCSSRules[k]);
							//bootstrapRules.unset(bootstrapCSSRule);
						}
						break;
					case "(min-width: 992px) and (max-width: 1199px)" : // MD
						prefix.push(MD_CLASS);

						var mediaCSSRules = bootstrapCSSRule.cssRules;
								for(var k=0; k<mediaCSSRules.length; k++)
								{
									var selArray = mediaCSSRules[k].selectorText.split(",");
									
									for(var l=0; l<selArray.length; l++)
									{
										var selText = ".pc.md " + selArray[l];
										selArray[l] = selText;
									}
									mediaCSSRules[k].selectorText = selArray.toString();
									bootstrapRules.splice(i, 1, mediaCSSRules[k]);
							//bootstrapRules.unset(bootstrapCSSRule);
						}
						break;
					case "(min-width: 1200px)" : // LG
						prefix.push(LG_CLASS);
						var mediaCSSRules = bootstrapCSSRule.cssRules;
						for(var k=0; k<mediaCSSRules.length; k++)
						{
							var selArray = mediaCSSRules[k].selectorText.split(",");
							for(var l=0; l<selArray.length; l++)
							{
								var selText = ".pc.lg " + selArray[l];
								selArray[l] = selText;
							}
							mediaCSSRules[k].selectorText = selArray.toString();
							bootstrapRules.splice(i, 1, mediaCSSRules[k]);
							//bootstrapRules.unset(bootstrapCSSRule);
						}
						break;
					}

				/*
				for(var k=0, cssRule; cssRule = bootstrapCSSRule.cssRules[k]; k++)
				{
					// cssRule = regles css de la media query
					// cssRule.selectorText = updateSelector(cssRule, prefix);
					//cssRule.selectorText = toto(cssRule, prefix);
					bootstrapRules.splice(i, 0, cssRule);
				}
				*/
				// remove the media query from the array.
				//bootstrapRules.unset(bootstrapCSSRule);
			}
		}

		//console.log(bootstrapStylesheet.toString);
		grunt.file.write('./newdist/css/custombootstrap.css', bootstrapStylesheet.toString(), {encoding:'utf8'});
	}

		

	}); // end of registerTask
}; // of module.exports
